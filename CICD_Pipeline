pipeline {
    agent any
    
    tools {
        jdk 'jdk17'
        nodejs 'node18'
    }
    
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        DOCKER_IMAGE = "roopraviteja/2048"
        DOCKER_TAG = "latest"
        DOCKER_CREDENTIALS_ID = 'docker'
    }
    
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/roop1011/2048_game.git'
            }
        }
        
        stage("SonarQube Analysis") {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=Game \
                        -Dsonar.projectKey=Game
                    '''
                }
            }
        }
        
        stage("Quality Gate") {
            steps {
                script {
                    try {
                        timeout(time: 10, unit: 'MINUTES') {
                            waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'
                        }
                    } catch (Exception e) {
                        echo "Quality gate failure: ${e.message}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }
        
        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DC'
                dependencyCheckPublisher pattern: '/dependency-check-report.xml'
            }
        }
        
        stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs --format table --output trivyfs.txt ."
            }
            post {
                always {
                    archiveArtifacts artifacts: 'trivyfs.txt', allowEmptyArchive: true
                }
            }
        }
        
        stage("Docker Build & Push") {
            steps {
                script {
                    try {
                        withDockerRegistry(credentialsId: "${DOCKER_CREDENTIALS_ID}", toolName: 'docker') {
                            sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                            sh "docker push ${DOCKER_IMAGE}:${DOCKER_TAG}"
                        }
                    } catch (Exception e) {
                        echo "Docker build or push failed: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        error "Docker stage failed"
                    }
                }
            }
        }
        
        stage("TRIVY Image Scan") {
            steps {
                sh "trivy image --format table --output trivyimagereport.txt ${DOCKER_IMAGE}:${DOCKER_TAG}"
            }
            post {
                always {
                    archiveArtifacts artifacts: 'trivyimagereport.txt', allowEmptyArchive: true
                }
            }
        }
        
        stage('Deploy to Development') {
            steps {
                echo "Deploying to development environment"
                // Add deployment steps here
            }
        }
    }
    
    post {
        always {
            // Clean up docker images to prevent disk space issues
            sh "docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true"
            // Removed publishHTML step
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
        unstable {
            echo 'Pipeline is unstable!'
        }
    }
}
